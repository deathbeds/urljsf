#  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░  #
# ░░  ░░░░  ░░       ░░░  ░░░░░░░░        ░░░      ░░░        ░░░░░░░      ░░░ #
# ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒  ▒▒  ▒▒▒▒▒▒▒▒  ▒▒▒▒▒▒▒▒▒▒▒▒  ▒▒▒▒  ▒▒ #
# ▓▓  ▓▓▓▓  ▓▓       ▓▓▓  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▓▓▓      ▓▓▓      ▓▓▓▓▓▓▓▓  ▓  ▓  ▓▓ #
# ██  ████  ██  ███  ███  ████████  ████  ████████  ██  ████████████  ████  ██ #
# ███      ███  ████  ██        ███      ████      ███  █████████████      ███ #
#  ▒▓██████████████████████████████████████████████████████████████████████▓▒  #

title = "urljsf"
description = "A schema for building forms for building URLs for building..."

"$schema" = "http://json-schema.org/draft-07/schema#"
"$id" = "https://deathbeds.github.io/urljsf/_static/urljsf/schema/v0/form.schema.json"
type = "object"
required = ["forms", "templates"]
additionalProperties = false

[properties]
"$schema" = {type = "string", format = "uri-reference", description = """
an optional identifier for the `urljsf` schema that constrains this: this
can be used by non-`urljsf` tools to validate and provide more insight while
authoring.
"""}
"$id" = {type = "string", format = "uri-reference", description = """
an optional identifier for this instance of the `urljsf` schema
"""}
forms = {"$ref" = "#/definitions/forms", description = """
forms that describe how to build the URL
"""}
templates = {"$ref" = "#/definitions/templates", description = """
`nunjucks` templates that control URLs for machines and markdown for humans
"""}
checks = {"$ref" = "#/definitions/checks", description = """
markdown templates, which if rendered to _any_ non-whitespace, will be treated as
an error, preventing the submit button from being shown.
"""}
style = {"$ref" = "#/definitions/styles", description = """
simple CSS rules scoped to the current form id, or objects keyed by child
selector
"""}

[properties.iframe]
description = "isolate each form on the page in an `iframe`"
type = "boolean"

[properties.iframe_style]
description = """
additional simple CSS to apply to an `iframe` element (implies `iframe`)
"""
type = "string"

[properties.no_bootstrap]
type = "boolean"
default = false
description = """don't try to add a link to bootstrap if missing."""

[properties.nunjucks]
type = "object"
description = "options for the `nunjucks` environment"

[properties.nunjucks.properties.filters]
type = "array"
description = """filters to ensure in `nunjucks` templates"""
items = {oneOf = [{"$ref" = "#/definitions/any-file-format"}]}
uniqueItems = true


# forms ########################################################################
[definitions.forms]
type = "object"
description = "forms used to build and populate a URL"
patternProperties = {'[a-zA-Z\d\-_]+' = {"$ref" = "#/definitions/any-form"}}

# templates ####################################################################
[definitions.templates]
description = """
[`nunjucks`][nunjucks] strings (or lists of strings) that control how strings
are built from forms. See documentation for further customizations.

[nunjucks]: https://mozilla.github.io/nunjucks/templating.html
"""
[[definitions.templates.allOf]]
"$ref" = "#/definitions/known-templates"

[[definitions.templates.allOf]]
type = "object"
additionalProperties = {"$ref" = "#/definitions/any-template"}

[definitions.known-templates]
type = "object"

[definitions.known-templates.properties]
url = {"$ref" = "#/definitions/any-template", description = """
a URL to build. all whitespace will be trimmed, then joined with no delimiter.
"""}
submit_button = {"$ref" = "#/definitions/any-template", description = """
text to show on the button when a form is valid. multiple lines will be joined
with `\\n`, then leading and trailing whitespace will be trimmed.
"""}
download_filename = {"$ref" = "#/definitions/any-template", description = """
If given, a template for the submit button's `download` attribute, to
suggest an appropriate filename, with leading and trailing whitespace trimmed.
"""}

[definitions.checks]
type = "object"
description = """
`nunjucks` templates keyed by the label displayed to a form user: any evaluating
to a non-whitespace string will be considered _failing_.
"""
additionalProperties = {"$ref" = "#/definitions/any-template"}

# url form #####################################################################
[definitions.any-form]
title = "Any Form"
description = "a definition of a form"
type = "object"
additionalProperties = false

[definitions.any-form.properties]
schema = {"$ref" = "#/definitions/any-schema", descripton = """
URL for a JSON schema to describe the this form: features not present in
Draft 7 are best-effort.
"""}
ui_schema = {"$ref" = "#/definitions/any-schema", descripton = """
URL for an `rjsf` UI schema to describe how the `schema` will be presented
"""}
form_data = {"$ref" = "#/definitions/any-schema", descripton = """
JSON-compatible initial data for this form
"""}
props = {"$ref" = "./props.schema.json#/definitions/Props", descripton = """
JSON-compatible subset of `rjsf` component properties for this form
"""}
order = {type = "number", description = """
the order in which to show a form, lowest (or omitted) first, with a tiebreaker on name
"""}

# templating ###################################################################
[definitions.any-schema]
title = "A Schema"
description = "A schema-like object referenced by URL, or inline as an object"
oneOf = [
  {title = "Schema By URL", "$ref" = "#/definitions/any-schema-location"},
  {title = "Inline Object", "$ref" = "#/definitions/any-object"},
]

[definitions.any-object]
title = "An Inline Object"
description = "A literal object"
type = "object"

[definitions.any-schema-location]
type = "string"
format = "uri-reference"
description = """
a path to a JSON schema, serialized as JSON, TOML, or (simple) YAML. The URN-like
`py:module.submodule:member` may be used to reference an importable module
`dict` or `str` member, or function that returns one, and will be expanded into
a JSON object or URL.
"""
minLength = 1

[definitions.any-template]
anyOf = [
  {type = "string", description = "a `nunjucks` template as a simple string"},
  {type = "array", items = {type = "string"}, minItems = 1, description = """
    a template as a list of strings that will be concatenated before being rendered
  """},
]

# style ########################################################################
[definitions.styles]
type = "object"
description = "CSS rules, or nested selector objects containing more rules"
patternProperties.'^.+$'."$ref" = "#/definitions/any-style"

[definitions.any-style]
description = "A CSS rule, or a nested selector object containing more rules"
oneOf = [
  {type = "string"},
  {type = "object"},
]

# other ########################################################################
[definitions.any-file-format]
title = "File Format"
type = "string"
description = "a format that can be serialized or deserialized"
enum = ["json", "toml", "yaml"]
